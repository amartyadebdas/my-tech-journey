# PIPELINE DEFINITION
# Name: house-price-prediction-pipeline
# Outputs:
#    evaluate-model-metrics_output: system.Metrics
#    process-data-length_metrics: system.Metrics
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        metrics_output:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
  comp-generate-simple-data:
    executorLabel: exec-generate-simple-data
    outputDefinitions:
      artifacts:
        output_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-process-data:
    executorLabel: exec-process-data
    inputDefinitions:
      artifacts:
        input_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        length_metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        train_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        saved_model_output:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(test_csv: Input[Dataset], model: Input[Model],\
          \ metrics_output: Output[Metrics]):\n    import subprocess\n    subprocess.run([\"\
          pip\", \"install\", \"pandas\", \"scikit-learn\", \"joblib\"], check=True)\n\
          \n    import pandas as pd\n    import joblib\n    from sklearn.metrics import\
          \ mean_squared_error, r2_score\n    import json\n\n    df = pd.read_csv(test_csv.path)\n\
          \    X = df.drop(columns=[\"price\"])\n    y = df[\"price\"]\n\n    model\
          \ = joblib.load(model.path)\n    y_pred = model.predict(X)\n    mse = mean_squared_error(y,\
          \ y_pred)\n    r2 = r2_score(y, y_pred)\n    # cm = confusion_matrix(y_pred,\
          \ y).tolist()\n    # cr = classification_report(y_pred, y)\n\n    metrics_output.log_metric(\"\
          Mean Squared Error\", mse)\n    metrics_output.log_metric(\"R2 Score\",\
          \ r2)    \n    # metrics_output.log_metric(\"Confusion Matrix\", str(cm))\n\
          \    # metrics_output.log_metric(\"Classification Report\", cr)\n\n    #\
          \ print(confusion_matrix)\n\n    metrics = {\"mean_squared_error\": mse}\n\
          \    with open(metrics_output.path, 'w') as f:\n        json.dump(metrics,\
          \ f)\n\n    print(f\"[Evaluation] MSE: {mse}\")\n    print(f\"[Evaluation]\
          \ R2 Score: {r2}\")\n\n"
        image: python:3.9
    exec-generate-simple-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - generate_simple_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef generate_simple_data(output_csv: Output[Dataset]):\n    import\
          \ subprocess\n    subprocess.run([\"pip\", \"install\", \"pandas\", \"numpy\"\
          ], check=True)\n\n    import pandas as pd\n    import numpy as np    \n\n\
          \    np.random.seed(42)\n    data = {\n        \"bedrooms\": np.random.randint(1,\
          \ 5, size=100),\n        \"bathrooms\": np.random.randint(1, 3, size=100),\n\
          \        \"sqft\": np.random.randint(500, 3500, size=100),\n        \"price\"\
          : np.random.randint(100000, 500000, size=100)\n    }\n\n    df = pd.DataFrame(data)\n\
          \    df.to_csv(output_csv.path, index=False)\n    print(f\"[Data Ingestion]\
          \ Data saved to: {output_csv.path}\")\n\n"
        image: python:3.9
    exec-process-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - process_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef process_data(input_csv: Input[Dataset], train_data: Output[Dataset],\
          \ test_data: Output[Dataset], length_metrics:Output[Metrics]):\n    import\
          \ subprocess\n    subprocess.run([\"pip\", \"install\", \"pandas\", \"scikit-learn\"\
          ], check=True)\n\n    import pandas as pd\n    from sklearn.model_selection\
          \ import train_test_split\n\n    df = pd.read_csv(input_csv.path)\n    train_df,\
          \ test_df = train_test_split(df, test_size=0.2, random_state=42)\n\n   \
          \ length_metrics.log_metric('train_dataset_length',len(train_df))\n    length_metrics.log_metric('test_dataset_length',len(test_df))\n\
          \n    train_df.to_csv(train_data.path, index=False)\n    test_df.to_csv(test_data.path,\
          \ index=False)\n    print(f\"[Data Processing] Train/Test data saved.\"\
          )\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(train_csv: Input[Dataset], saved_model_output: Output[Model]):\n\
          \    import subprocess\n    subprocess.run([\"pip\", \"install\", \"pandas\"\
          , \"scikit-learn\", \"joblib\"], check=True)\n\n    import pandas as pd\n\
          \    from sklearn.linear_model import LinearRegression\n    import joblib\n\
          \n    df = pd.read_csv(train_csv.path)\n    X = df.drop(columns=[\"price\"\
          ])\n    y = df[\"price\"]\n\n    model = LinearRegression()\n    model.fit(X,\
          \ y)\n\n    joblib.dump(model, saved_model_output.path)\n    print(f\"[Model\
          \ Training] Model saved at {saved_model_output.path}\")\n\n"
        image: python:3.9
pipelineInfo:
  name: house-price-prediction-pipeline
root:
  dag:
    outputs:
      artifacts:
        evaluate-model-metrics_output:
          artifactSelectors:
          - outputArtifactKey: metrics_output
            producerSubtask: evaluate-model
        process-data-length_metrics:
          artifactSelectors:
          - outputArtifactKey: length_metrics
            producerSubtask: process-data
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - process-data
        - train-model
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: saved_model_output
                producerTask: train-model
            test_csv:
              taskOutputArtifact:
                outputArtifactKey: test_data
                producerTask: process-data
        taskInfo:
          name: evaluate-model
      generate-simple-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-generate-simple-data
        taskInfo:
          name: generate-simple-data
      process-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-process-data
        dependentTasks:
        - generate-simple-data
        inputs:
          artifacts:
            input_csv:
              taskOutputArtifact:
                outputArtifactKey: output_csv
                producerTask: generate-simple-data
        taskInfo:
          name: process-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - process-data
        inputs:
          artifacts:
            train_csv:
              taskOutputArtifact:
                outputArtifactKey: train_data
                producerTask: process-data
        taskInfo:
          name: train-model
  outputDefinitions:
    artifacts:
      evaluate-model-metrics_output:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      process-data-length_metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.9.0
